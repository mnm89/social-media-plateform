services:
  user-db:
    container_name: user-db
    image: postgres:latest
    environment:
      POSTGRES_USER: user_user
      POSTGRES_PASSWORD: user_password
      POSTGRES_DB: user_service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_user -d user_service"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "5433:5432"
    volumes:
      - user_data:/var/lib/postgresql/data

  post-db:
    container_name: post-db
    image: postgres:latest
    environment:
      POSTGRES_USER: post_user
      POSTGRES_PASSWORD: post_password
      POSTGRES_DB: post_service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U post_user -d post_service"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "5434:5432"
    volumes:
      - post_data:/var/lib/postgresql/data

  file-db:
    container_name: file-db
    image: postgres:latest
    environment:
      POSTGRES_USER: file_user
      POSTGRES_PASSWORD: file_password
      POSTGRES_DB: file_service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U file_user -d file_service"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "5435:5432"
    volumes:
      - file_data:/var/lib/postgresql/data

  keycloak-db:
    container_name: keycloak-db
    image: postgres:latest
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak_user
      POSTGRES_PASSWORD: keycloak_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak_user -d keycloak"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - keycloak_data:/var/lib/postgresql/data

  keycloak:
    container_name: keycloak
    image: keycloak/keycloak:26.0.5
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db/keycloak
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: keycloak_password
      KC_BOOTSTRAP_ADMIN_USERNAME: admin # Admin username
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin_password # Admin password
      KC_HOSTNAME_STRICT: false # Allows HTTP in development mode
      KC_HTTP_ENABLED: true # Explicitly enable HTTP
      KC_HEALTH_ENABLED: true
      KC_LOG_LEVEL: INFO
      KC_LOG_CONSOLE_OUTPUT: default
    command: start --import-realm  --http-enabled=true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/localhost/9000; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n' >&3; cat <&3 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "8080:8080"
    depends_on:
      keycloak-db:
        condition: service_healthy
    volumes:
      - ./keycloak-realm-config/:/opt/keycloak/data/import/ # Import realm files

  api-gateway:
    container_name: api-gateway
    build: ./api-gateway
    ports:
      - "80:3000"
    environment:
      - SESSION_SECRET=session_secret
      - KEYCLOAK_SERVER_URL=http://keycloak:8080
      - KEYCLOAK_REALM=social-media-platform
      - KEYCLOAK_CLIENT_ID=web-client
      - USER_SERVICE_URL=http://user-service:3000
      - POST_SERVICE_URL=http://post-service:3000
      - FILE_SERVICE_URL=http://file-service:3000
    depends_on:
      keycloak:
        condition: service_healthy
      user-service:
        condition: service_started
      post-service:
        condition: service_started
      file-service:
        condition: service_started

  user-service:
    container_name: user-service
    build: ./user-service
    # ports:
    #   - "3001:3000"
    environment:
      - DATABASE_URL=postgres://user_user:user_password@user-db/user_service
      - SESSION_SECRET=session_secret
      - KEYCLOAK_SERVER_URL=http://keycloak:8080
      - KEYCLOAK_REALM=social-media-platform
      - KEYCLOAK_CLIENT_ID=user-management-service
      - KEYCLOAK_CLIENT_SECRET=YXbgBO3JcrBOqfpzoMfQf2gPnfZrBTuw
      - KEYCLOAK_WEB_CLIENT_ID=web-client
      - FILE_SERVICE_URL=http://file-service:3000
      - REDIS_URL=redis://redis:6379
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  post-service:
    container_name: post-service
    build: ./post-service
    # ports:
    #   - "3002:3000"
    environment:
      - DATABASE_URL=postgres://post_user:post_password@post-db/post_service
      - SESSION_SECRET=session_secret
      - KEYCLOAK_SERVER_URL=http://keycloak:8080
      - KEYCLOAK_REALM=social-media-platform
      - KEYCLOAK_CLIENT_ID=post-management-service
      - KEYCLOAK_CLIENT_SECRET=wE1FPnBaMbd2GkcyyqQFO3s8Y7gfepk3
      - USER_SERVICE_URL=http://user-service:3000
      - FILE_SERVICE_URL=http://file-service:3000
      - REDIS_URL=redis://redis:6379
    depends_on:
      post-db:
        condition: service_healthy
      redis:
        condition: service_healthy

  file-service:
    container_name: file-service
    build: ./file-service
    # ports:
    #   - "3003:3000"
    environment:
      - DATABASE_URL=postgres://file_user:file_password@file-db/file_service
      - KEYCLOAK_SERVER_URL=http://keycloak:8080
      - KEYCLOAK_REALM=social-media-platform
      - KEYCLOAK_CLIENT_ID=file-management-service
      - KEYCLOAK_CLIENT_SECRET=X9Lq1PkArTY7Mnb8GcX2Fv4Qo6ZJepW3
      - SESSION_SECRET=session_secret
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=assets
      - REDIS_URL=redis://redis:6379
    depends_on:
      file-db:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy

  minio:
    container_name: minio
    image: minio/minio:${MINIO_VERSION:-RELEASE.2024-10-13T13-34-11Z.fips}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - minio_data:/data
    expose:
      - "9000"
      - "9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - 9000:9000
      - 9001:9001

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data # Mount a named volume to persist data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  notification-service:
    container_name: notification-service
    build: ./notification-service
    # ports:
    #   - "3004:3000"
    depends_on:
      - redis
      - rabbitmq

  recommendation-service:
    container_name: recommendation-service
    build: ./recommendation-service
    # ports:
    #   - "3005:3000"
    depends_on:
      - redis
      - rabbitmq

volumes:
  user_data:
  post_data:
  file_data:
  minio_data:
  redis_data:
  keycloak_data:
