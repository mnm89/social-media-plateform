services:
  user-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: user_user
      POSTGRES_PASSWORD: user_password
      POSTGRES_DB: user_service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_user -d user_service"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "5433:5432"
    volumes:
      - user_data:/var/lib/postgresql/data

  post-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: post_user
      POSTGRES_PASSWORD: post_password
      POSTGRES_DB: post_service
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U post_user -d post_service"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "5434:5432"
    volumes:
      - post_data:/var/lib/postgresql/data

  keycloak-db:
    image: postgres:latest
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak_user
      POSTGRES_PASSWORD: keycloak_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak_user -d keycloak"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - keycloak_data:/var/lib/postgresql/data

  keycloak:
    image: keycloak/keycloak:26.0.5
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db/keycloak
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: keycloak_password
      KC_BOOTSTRAP_ADMIN_USERNAME: admin # Admin username
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin_password # Admin password
      KC_HOSTNAME_STRICT: false # Allows HTTP in development mode
      KC_HTTP_ENABLED: true # Explicitly enable HTTP
      KC_HEALTH_ENABLED: true
      KC_LOG_LEVEL: INFO
      KC_LOG_CONSOLE_OUTPUT: default
    command: start --import-realm  --http-enabled=true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/localhost/9000; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n' >&3; cat <&3 | grep -q 'HTTP/1.1 200 OK'",
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
      - "8080:8080"
    depends_on:
      keycloak-db:
        condition: service_healthy
    volumes:
      - ./keycloak-realm-config/:/opt/keycloak/data/import/ # Import realm files

  api-gateway:
    build: ./api-gateway
    ports:
      - "80:3000"
    environment:
      - SESSION_SECRET=session_secret
      - KEYCLOAK_SERVER_URL=http://keycloak:8080
      - KEYCLOAK_REALM=social-media-platform
      - KEYCLOAK_CLIENT_ID=web-client
      - USER_SERVICE_URL=http://user-service:3000
      - POST_SERVICE_URL=http://post-service:3000
    depends_on:
      keycloak:
        condition: service_healthy
      user-service:
        condition: service_started
      post-service:
        condition: service_started

  user-service:
    build: ./user-service
    ports:
      - "3001:3000"
    environment:
      - DATABASE_URL=postgres://user_user:user_password@user-db/user_service
      - SESSION_SECRET=session_secret
      - KEYCLOAK_SERVER_URL=http://keycloak:8080
      - KEYCLOAK_REALM=social-media-platform
      - KEYCLOAK_CLIENT_ID=user-management-service
      - KEYCLOAK_CLIENT_SECRET=YXbgBO3JcrBOqfpzoMfQf2gPnfZrBTuw
      - KEYCLOAK_WEB_CLIENT_ID=web-client
    volumes:
      - ./scripts/wait-for-it.sh:/app/wait-for-it.sh # Mount wait-for-it.sh
    depends_on:
      keycloak:
        condition: service_healthy
      user-db:
        condition: service_healthy

  post-service:
    build: ./post-service
    ports:
      - "3002:3000"
    environment:
      - DATABASE_URL=postgres://post_user:post_password@post-db/post_service
      - SESSION_SECRET=session_secret
      - KEYCLOAK_SERVER_URL=http://keycloak:8080
      - KEYCLOAK_REALM=social-media-platform
      - KEYCLOAK_CLIENT_ID=post-management-service
      - KEYCLOAK_CLIENT_SECRET=wE1FPnBaMbd2GkcyyqQFO3s8Y7gfepk3
      - USER_SERVICE_URL=http://user-service:3000
    depends_on:
      post-db:
        condition: service_healthy
      user-service:
        condition: service_started

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  notification-cache:
    image: redis:latest
    ports:
      - "6380:6379" # Separate Redis instance for notification storage (if desired)

  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  notification-service:
    build: ./notification-service
    ports:
      - "3003:3000"
    environment:
      REDIS_HOST: notification-cache
    depends_on:
      - notification-cache
      - rabbitmq

  recommendation-service:
    build: ./recommendation-service
    ports:
      - "3004:3000"
    environment:
      REDIS_HOST: redis
    depends_on:
      - redis
      - rabbitmq

volumes:
  user_data:
  post_data:
  keycloak_data:
